{{- if .Values.postgresql.enabled }}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ .Release.Name }}-postgresql
  namespace: {{ .Release.Namespace }}
  labels:
    app: {{ .Release.Name }}-postgresql
    app.kubernetes.io/name: {{ .Chart.Name }}-postgresql
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/version: {{ .Chart.AppVersion }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
spec:
  serviceName: {{ .Release.Name }}-postgresql
  replicas: 1
  selector:
    matchLabels:
      app: {{ .Release.Name }}-postgresql
  template:
    metadata:
      labels:
        app: {{ .Release.Name }}-postgresql
        app.kubernetes.io/name: {{ .Chart.Name }}-postgresql
        app.kubernetes.io/instance: {{ .Release.Name }}
    spec:
      securityContext:
        runAsNonRoot: false  # PostgreSQL needs to run as postgres user
        runAsUser: 999       # postgres user
        runAsGroup: 999
        fsGroup: 999
      initContainers:
      - name: postgres-data-permission-fix
        image: busybox:1.35
        command:
        - /bin/chown
        - -R
        - "999:999"
        - /var/lib/postgresql/data
        volumeMounts:
        - name: postgresql-data
          mountPath: /var/lib/postgresql/data
        securityContext:
          runAsUser: 0  # Need root to chown
      containers:
      - name: postgresql
        image: "{{ .Values.postgresql.image.repository }}:{{ .Values.postgresql.image.tag }}"
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false
          runAsNonRoot: false  # PostgreSQL needs postgres user
          runAsUser: 999
          capabilities:
            drop:
            - ALL
        ports:
        - containerPort: 5432
          protocol: TCP
        env:
        - name: POSTGRES_DB
          valueFrom:
            secretKeyRef:
              name: {{ .Values.secretName }}
              key: DB_NAME
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: {{ .Values.secretName }}
              key: DB_USER
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ .Values.secretName }}
              key: DB_PASS
        - name: POSTGRES_PORT
          valueFrom:
            secretKeyRef:
              name: {{ .Values.secretName }}
              key: DB_PORT
        volumeMounts:
        - name: postgresql-data
          mountPath: /var/lib/postgresql/data
        resources:
          {{- toYaml .Values.postgresql.resources | nindent 10 }}
        livenessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - pg_isready -U bluer_book -d bluer_book
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - pg_isready -U bluer_book -d bluer_book
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
  {{- if .Values.postgresql.persistence.enabled }}
  volumeClaimTemplates:
  - metadata:
      name: postgresql-data
    spec:
      accessModes: [ "ReadWriteOnce" ]
      storageClassName: {{ .Values.postgresql.persistence.storageClass }}
      resources:
        requests:
          storage: {{ .Values.postgresql.persistence.size }}
  {{- end }}
{{- end }}
